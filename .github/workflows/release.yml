
name: Release

on:
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    timeout-minutes: 20
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for proper versioning
      
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Verify version sync
      run: |
        # Extract version from tag (remove 'v' prefix)
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        
        # Get version from Cargo.toml
        CARGO_VERSION=$(grep '^version = ' Cargo.toml | cut -d'"' -f2)
        
        echo "Tag version: $TAG_VERSION"
        echo "Cargo.toml version: $CARGO_VERSION"
        
        # Verify they match
        if [ "$TAG_VERSION" != "$CARGO_VERSION" ]; then
          echo "❌ Version mismatch! Tag version ($TAG_VERSION) != Cargo.toml version ($CARGO_VERSION)"
          exit 1
        fi
        
        echo "✅ Version sync verified: $TAG_VERSION"
        
    - name: Build release
      run: cargo build --release
        
    - name: Create release archives
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        
        # Create artifacts directory
        mkdir -p artifacts
        
        # Copy binary
        cp target/release/ai-cli artifacts/
        
        # Create tar.gz archive
        cd artifacts
        tar -czf ../ai-cli-v$VERSION.tar.gz *
        
        # Create zip archive for Windows users
        cd ..
        zip -r ai-cli-v$VERSION.zip artifacts/
        
    - name: Verify artifacts
      run: |
        echo "Checking for release artifacts..."
        ls -la *.tar.gz *.zip || echo "No artifacts found in current directory"
        if [ ! -f "ai-cli-${{ github.ref_name }}.tar.gz" ]; then
          echo "❌ Expected tar.gz artifact not found"
          exit 1
        fi
        if [ ! -f "ai-cli-${{ github.ref_name }}.zip" ]; then
          echo "❌ Expected zip artifact not found"
          exit 1
        fi
        echo "✅ All expected artifacts found"
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ai-cli-${{ github.event.release.tag_name }}.tar.gz
          ai-cli-${{ github.event.release.tag_name }}.zip
        generate_release_notes: true
        draft: false
        prerelease: false
        fail_on_unmatched_files: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sync-version-and-tag:
    name: Sync Version and Create Tag
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 15
    permissions:
      contents: write
      packages: write
    outputs:
      new_tag: ${{ steps.version.outputs.new_tag }}
      new_version: ${{ steps.version.outputs.new_version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Get current version
      id: current_version
      run: |
        CURRENT_VERSION=$(grep '^version = ' Cargo.toml | cut -d'"' -f2)
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version from Cargo.toml: $CURRENT_VERSION"
        
    - name: Generate new version
      id: version
      run: |
        # Get the current version from Cargo.toml
        CURRENT_VERSION=$(grep '^version = ' Cargo.toml | cut -d'"' -f2)
        
        # Parse version components
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        # Increment patch version
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
        NEW_TAG="v$NEW_VERSION"
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
        
        echo "Current version: $CURRENT_VERSION"
        echo "New version: $NEW_VERSION"
        echo "New tag: $NEW_TAG"
        
    - name: Update Cargo.toml version
      run: |
        NEW_VERSION=${{ steps.version.outputs.new_version }}
        echo "Updating Cargo.toml version to: $NEW_VERSION"

        # Update version in Cargo.toml
        sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" Cargo.toml

        # Verify the update
        UPDATED_VERSION=$(grep '^version = ' Cargo.toml | cut -d'"' -f2)
        echo "Updated Cargo.toml version: $UPDATED_VERSION"

        if [ "$UPDATED_VERSION" != "$NEW_VERSION" ]; then
          echo "❌ Failed to update Cargo.toml version"
          exit 1
        fi

        echo "✅ Cargo.toml version updated successfully"

        # Update Cargo.lock to match new version
        cargo update
        echo "✅ Cargo.lock updated"
        
    - name: Commit and push version bump
      run: |
        NEW_VERSION=${{ steps.version.outputs.new_version }}

        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # Add and commit the version bump
        git add Cargo.toml Cargo.lock
        git commit -m "Bump version to $NEW_VERSION [skip ci]"

        # Push the commit with retry logic
        for i in {1..3}; do
          if git push origin main; then
            echo "✅ Version bump committed and pushed successfully"
            break
          else
            echo "⚠️ Push attempt $i failed, retrying..."
            if [ $i -eq 3 ]; then
              echo "❌ Failed to push after 3 attempts"
              exit 1
            fi
            sleep 5
          fi
        done
        
    - name: Create and push tag
      run: |
        NEW_TAG=${{ steps.version.outputs.new_tag }}
        NEW_VERSION=${{ steps.version.outputs.new_version }}
        
        # Create tag
        git tag -a "$NEW_TAG" -m "Release $NEW_VERSION"
        
        # Push tag with retry logic
        for i in {1..3}; do
          if git push origin "$NEW_TAG"; then
            echo "✅ Tag $NEW_TAG created and pushed successfully"
            break
          else
            echo "⚠️ Tag push attempt $i failed, retrying..."
            if [ $i -eq 3 ]; then
              echo "❌ Failed to push tag after 3 attempts"
              exit 1
            fi
            sleep 5
          fi
        done
        
    - name: Verify sync
      run: |
        NEW_TAG=${{ steps.version.outputs.new_tag }}
        NEW_VERSION=${{ steps.version.outputs.new_version }}
        
        # Extract version from tag
        TAG_VERSION=${NEW_TAG#v}
        
        echo "Tag version: $TAG_VERSION"
        echo "Cargo.toml version: $NEW_VERSION"
        
        if [ "$TAG_VERSION" != "$NEW_VERSION" ]; then
          echo "❌ Final verification failed! Tag version ($TAG_VERSION) != Cargo.toml version ($NEW_VERSION)"
          exit 1
        fi
        
        echo "✅ Final verification passed: $TAG_VERSION" 